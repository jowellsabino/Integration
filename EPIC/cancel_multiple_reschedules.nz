/* get all visits that was reschduled more than once from a cancelled-rescheduled visit */
/* This captures miltiple reschedules, though */
create temp table epic_cancel_resched as (
	select orig_enc.pat_enc_csn_id as Original_CSN
		 , count(*) as Reschedule_Count 
  	  from ads_epic_stage.admin.chb_pat_enc orig_enc 
      join ads_epic_stage.admin.chb_pat_enc epic_resched on epic_resched.original_csn = orig_enc.pat_enc_csn_id
	  join ads_epic_stage.admin.pat_enc epic_enc on epic_enc.pat_enc_csn_id = epic_resched.pat_enc_csn_id
	   and epic_enc.APPT_MADE_DATE  < to_date('08-May-2018 06:30:00','DD-Mon-YYYY HH24:MI:SS')  /* Date of the FIX */
       -- and epic_enc.appt_status_c != 3 /* 3 = Cancelled appointment.  If the appt is cancelled and rescheduled again, do not count the reschedule */
 	 where orig_enc.original_csn is NULL
  group by orig_enc.pat_enc_csn_id
  having count(*) > 1 
);

create temp table epic_problematic as (
select epic_pt.PAT_NAME as Patient_Name
     , epic_pt.PAT_MRN_ID as MRN
	 , epic_resched.Original_CSN
     , epic_enc.PAT_ENC_CSN_ID as rescheuled_csn
	 , case when epic_enc.appt_status_c = 1 then 'Pending'
	        when epic_enc.appt_status_c = 2 then 'Complete'
	        when epic_enc.appt_status_c = 3 then 'Cancelled' 
			when epic_enc.appt_status_c = 4 then 'No Show' 
			when epic_enc.appt_status_c = 5 then 'Left'
			when epic_enc.appt_status_c = 6 then 'Arrived'
			else 'Unknown'
	   end as appointment_status
	 , epic_enc.appt_status_c
	 , epic_enc.update_date
	 , epic_enc.appt_time as DOS
	 , epic_enc.APPT_MADE_DATE as Appt_Create_Date
	 , epic_dept.DEPARTMENT_NAME as Clinic_Name
	 , epic_empl.name as Rescheduled_by
	 , epic_serv.prov_name as Attnding_Provider
  from ads_epic_stage.admin.PAT_ENC epic_enc
  join ads_epic_stage.admin.patient epic_pt on epic_pt.pat_id = epic_enc.pat_id
  join ads_epic_stage.admin.clarity_dep epic_dept on epic_dept.department_id = epic_enc.department_id
  join ads_epic_stage.admin.clarity_emp epic_empl on epic_empl.user_id  = epic_enc.APPT_ENTRY_USER_ID
  join ads_epic_stage.admin.clarity_ser epic_serv on epic_serv.prov_id = epic_enc.ATTND_PROV_ID
  /* Join on problematic cancel-rescheduled encounters */
  join ads_epic_stage.admin.chb_pat_enc epic_prob on epic_prob.pat_enc_csn_id = epic_enc.pat_enc_csn_id
  join epic_cancel_resched epic_resched on epic_resched.original_csn = epic_prob.original_csn
   -- DEBUG: and epic_resched.original_csn = 6122493910
where epic_enc.APPT_MADE_DATE < to_date('08-May-2018 06:30:00','DD-Mon-YYYY HH24:MI:SS')/* Date of the FIX */
 -- and epic_enc.appt_time > now() - 120  /* We look back 30 days, to allow billing charges to go through */
 -- and epic_enc.update_date > now() - 120
 -- and epic_enc.APPT_STATUS_C > 6 /* Filter already cancelled encounter, since NO EPIC activity will be possible */
);


select  ep1.* 
from epic_problematic ep1
join epic_problematic ep2 on ep2.original_csn = ep1.original_csn
  and ep2.appt_status_c = 1 /* We are only interested in encounters that still has a pending encounter */
order by ep1.patient_name,  ep1.Original_CSN asc, ep1.update_date desc
;